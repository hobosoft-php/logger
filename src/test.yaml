logger:
    config:
        show_timestamps:            true
        enable_channels:            true

    defaults:
        handler_class:            Monolog\Formatter\LineFormatter
        formatter_class:          Monolog\Handler\StreamHandler
        formatter_format:         '[%timestamp%] %channel%.%level_name%: %message% %context%'

    logger:
        handlers:                 [print_writer]
        processors:               [timestamp]
        filters:                  []

    handlers:
        buffer_writer:
            class:                Library\Logger\Writers\BufferWriter
            handlers:             [print_writer]
            processors:           []
            formatter:
            extra_opt:            /tmp/log.txt

        print_writer:
            class:                Library\Logger\Writers\PrintWriter
            handlers:             []
            processors:           []

    formatters:
        passthru:
            class:                Library\Logger\Formatters\PassthruFormatter
            format:               '[%timestamp%] %channel%.%level_name%: %message% %context%'
        line:
            class:                Library\Logger\Formatters\LineFormatter
            format:                 ~

    processors:
        tag:
            class:                Library\Logger\Processors\TagProcessor
        hostname:
            class:                Library\Logger\Processors\HostnameProcessor
        timestamp:
            class:                Library\Logger\Processors\TimestampProcessor

    filters:
        tag:
            class:              Library\Logger\Filters\TagFilter
        level:
            class:              Library\Logger\Filters\LevelFilter
        channel:
            class:              Library\Logger\Filters\ChannelFilter




    # A writer is almost like a handler, except instead of passing the LogItem to the next one, it will output it somewhere.
    writers:

        # Prototype
        name:
            class:                ~ # Required
            formatter:            ~
#            handlers:             []
#            processors:           [tag]

    # Define the logger cascade tree here.  Every 'logger' is the start of a chain, and the end should be a writer w/formatter.
    cascade:

        # Prototype
        name:
            class:                ~ # Required
